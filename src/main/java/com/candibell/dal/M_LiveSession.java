package com.candibell.dal;

import org.apache.log4j.Logger;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

@DynamoDBTable(tableName = "PLACEHOLDER_LIVESESSIONS_TABLE_NAME")
public class M_LiveSession {
	
	// get the table name from env. var. set in serverless.yml
    private static final String LIVESESSIONS_TABLE_NAME = System.getenv("LIVE_SESSIONS_TABLE_NAME");
    
    private static DynamoDBAdapter db_adapter;
    private static AmazonDynamoDB client;
    private static DynamoDBMapper mapper;
    
    private static Logger logger = Logger.getLogger(M_LiveSession.class);
    
    static {
    	DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
    			.withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(LIVESESSIONS_TABLE_NAME))
    			.build();
    	// get the db adapter
    	db_adapter = DynamoDBAdapter.getInstance();
    	client = db_adapter.getDbClient();
    	// create the mapper with config
    	mapper = db_adapter.createDbMapper(mapperConfig);
    }
    
    public M_LiveSession() {
    }
    
    // methods
    public Boolean ifTableExists() {
        return client.describeTable(LIVESESSIONS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }
    
    private String userId;
    private String deviceId;
    private String sessionId;
    private String category;
    private Long startTimestamp;
    private Double score;
    private String state;
    private Integer pastTimeInSeconds;
    private Integer remainTimeInSeconds;
    private String lastUpdatedTime;
    private String trackingProfile;
    
    @DynamoDBHashKey(attributeName = "userId")
    public String getUserId() {
        return this.userId;
    }
    public M_LiveSession setUserId(String userId) {
    	this.userId = userId;
    	return this;
    }
    
    @DynamoDBRangeKey(attributeName = "deviceId")
    public String getDeviceId() {
    	return this.deviceId;
    }
    public M_LiveSession setDeviceId(String deviceId) {
    	this.deviceId = deviceId;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "sessionId")
    public String getSessionId() {
    	return this.sessionId;
    }
    public M_LiveSession setSessionId(String sessionId) {
    	this.sessionId = sessionId;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "category")
    public String getCategory() {
    	return this.category;
    }
    public M_LiveSession setCategory(String category) {
    	this.category = category;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "startTimestamp")
    public Long getStartTimeInSeconds() {
    	return this.startTimestamp;
    }
    public M_LiveSession setStartTimeInSeconds(Long timestamp) {
    	this.startTimestamp = timestamp;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "score")
    public Double getScore() {
    	return this.score;
    }
    public M_LiveSession setScore(Double score) {
    	this.score = score;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "state")
    public String getState() {
    	return this.state;
    }
    public M_LiveSession setState(String state) {
    	this.state = state;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "pastTimeInSeconds")
    public Integer getPastTimeInSeconds() {
    	return this.pastTimeInSeconds;
    }
    public M_LiveSession setPastTimeInSeconds(Integer pastTimeInSeconds) {
    	this.pastTimeInSeconds = pastTimeInSeconds;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "remainTimeInSeconds")
    public Integer getRemainTimeInSeconds() {
    	return this.remainTimeInSeconds;
    }
    public M_LiveSession setRemainTimeInSeconds(Integer remainTimeInSeconds) {
    	this.remainTimeInSeconds = remainTimeInSeconds;
    	return this;
    }
    
    @DynamoDBAttribute(attributeName = "trackingProfile")
    public String getTrackingProfile() {
    	return this.trackingProfile;
    }
    public M_LiveSession setTrackingProfile(String trackingProfile) {
    	this.trackingProfile = trackingProfile;
    	return this;		
    }
    
    @DynamoDBAttribute(attributeName = "lastUpdatedTime")
    @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.ALWAYS)
    public String getLastUpdatedTime() {
    	return this.lastUpdatedTime;
    }
    public M_LiveSession setLastUpdatedTime(String lastUpdatedTime) {
    	this.lastUpdatedTime = lastUpdatedTime;
    	return this;
    }

    
	@Override
	public String toString() {
		return "M_LiveSession [userId=" + userId + ", deviceId=" + deviceId + ", sessionId=" + sessionId + ", category="
				+ category + ", startTimestamp=" + startTimestamp + ", score=" + score + ", state=" + state
				+ ", pastTimeInSeconds=" + pastTimeInSeconds + ", remainTimeInSeconds=" + remainTimeInSeconds
				+ ", lastUpdatedTime=" + lastUpdatedTime + ", trackingProfile=" + trackingProfile + "]";
	}
    
}
